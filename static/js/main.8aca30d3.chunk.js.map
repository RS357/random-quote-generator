{"version":3,"sources":["QuoteButton/QuoteButton.js","QuoteDisplay/QuoteDisplay.js","Icon/Icon.js","AuthorName/AuthorName.js","Colours/colours.js","App.js","index.js"],"names":["QuoteButton","_ref","handleClick","react_default","a","createElement","type","value","onClick","QuoteDisplay","quote","className","quotationMark","index_es","icon","Icon","AuthorName","name","colours","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTwitterShare","state","shareQuote","author","currentAuthor","window","open","concat","handleTumblrShare","encodeURIComponent","componentDidMount","fetchData","decodeQuote","html","txt","document","innerHTML","fetch","cache","then","response","json","data","parsedQuote","replace","htmlQuote","length","setState","fetchColour","colour","Colours","Math","floor","random","style","backgroundColor","src_QuoteDisplay_QuoteDisplay","faQuoteLeft","src_AuthorName_AuthorName","src_Icon_Icon","src_QuoteButton_QuoteButton","React","Component","ReactDOM","render","src_App_0","getElementById"],"mappings":"4TASeA,MANf,SAAAC,GAAqC,IAAdC,EAAcD,EAAdC,YACtB,OACCC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,MAAM,YAAYC,QAASN,oBCKnCO,MANf,SAAAR,GAAyD,IAAlCS,EAAkCT,EAAlCS,MAAOC,EAA2BV,EAA3BU,UAAWC,EAAgBX,EAAhBW,cACxC,OACCT,EAAAC,EAAAC,cAAA,QAAMM,UAAWA,GAAYR,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMF,IAAkBF,UCIzDK,MANf,SAAAd,GAAyC,IAAzBU,EAAyBV,EAAzBU,UAAWT,EAAcD,EAAdC,YAC1B,OACCC,EAAAC,EAAAC,cAAA,KAAGM,UAAWA,EAAWH,QAASN,WCGrBc,MANf,SAAAf,GAAwCA,EAAlBU,UAAkB,IAAPM,EAAOhB,EAAPgB,KAChC,OACCd,EAAAC,EAAAC,cAAA,QAAMM,UAAU,UAAUM,YCHbC,EAFD,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WCsGzHC,qBA3Fd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAUPQ,mBAAqB,WACpB,IAAIC,EAAQR,EAAKQ,MAAMC,WACnBC,EAASV,EAAKQ,MAAMG,cACxBC,OAAOC,KAAP,yDAAAC,OAAqEN,EAArE,KAAAM,OAA8EJ,KAd5DV,EAiBnBe,kBAAoB,WACnB,IAAIL,EAASM,mBAAmBhB,EAAKQ,MAAMG,eACvCtB,EAAQ2B,mBAAmBhB,EAAKQ,MAAMC,YAC1CG,OAAOC,KAAP,gFAAAC,OAA4FJ,EAA5F,aAAAI,OAA8GzB,EAA9G,0FApBkBW,EAuBnBiB,kBAAoB,kBACnBjB,EAAKkB,aAxBalB,EA4BnBmB,YAAc,SAACC,GACd,IAAIC,EAAMC,SAAStC,cAAc,YAEjC,OADAqC,EAAIE,UAAYH,EACTC,EAAInC,OA/BOc,EAmCnBkB,UAAY,WACXM,MAAM,+CAAiD,CAACC,MAAO,aAC7DC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACL,IAAIC,EAAcD,EAAK,GAAL,MAAiBE,QAAQ,eAAgB,IACvDC,EAAYhC,EAAKmB,YAAYW,GAE7BE,EAAUC,OAAS,IACtBjC,EAAKkB,YAEJlB,EAAKkC,SAAS,CACZzB,WAAYuB,EACZrB,cAAekB,EAAK,GAAL,cAKrB7B,EAAKmC,eApDanC,EAyDnBmC,YAAc,WACbnC,EAAKkC,SAAS,CACbE,OAAQC,EAAQC,KAAKC,MAAMD,KAAKE,SAAYH,EAAQJ,YAzDrDjC,EAAKQ,MAAQ,CACZC,WAAY,iBACZE,cAAe,iBACfyB,OAAQ,OALSpC,wEAiElB,OACClB,EAAAC,EAAAC,cAAA,OAAKyD,MAAO,CAACC,gBAAiBvC,KAAKK,MAAM4B,QAAS9C,UAAU,aAC3DR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACdR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACdR,EAAAC,EAAAC,cAAC2D,EAAD,CAAcrD,UAAU,QAAQC,cAAeqD,IAAavD,MAAOc,KAAKK,MAAMC,cAE/E3B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBACdR,EAAAC,EAAAC,cAAC6D,EAAD,CAAYvD,UAAU,SAASM,KAAMO,KAAKK,MAAMG,iBAEjD7B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,wBACdR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SACdR,EAAAC,EAAAC,cAAC8D,EAAD,CAAMxD,UAAU,wBAAwBT,YAAasB,KAAKI,qBAC1DzB,EAAAC,EAAAC,cAAC8D,EAAD,CAAMxD,UAAU,uBAAuBT,YAAasB,KAAKY,qBAE1DjC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACdR,EAAAC,EAAAC,cAAC+D,EAAD,CAAalE,YAAasB,KAAKe,uBAjFpB8B,IAAMC,YCNxBC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAAS9B,SAAS+B,eAAe","file":"static/js/main.8aca30d3.chunk.js","sourcesContent":["import React from 'react';\nimport './QuoteButton.css';\n\nfunction QuoteButton ({handleClick}) {\n\treturn (\n\t\t<input type='button' value='New Quote' onClick={handleClick}></input>\n\t)\n}\n\nexport default QuoteButton;\n","import React from 'react';\nimport './QuoteDisplay.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction QuoteDisplay({quote, className, quotationMark}) {\n\treturn (\n\t\t<span className={className} ><FontAwesomeIcon icon={quotationMark} />{quote}</span>\n\t)\n}\n\nexport default QuoteDisplay\n","import React from 'react';\nimport './Icon.css'\n\n\nfunction Icon ({className, handleClick}) {\n\treturn (\n\t\t<i className={className} onClick={handleClick}></i>\n\t)\n}\n\nexport default Icon;\n","import React from 'react'\nimport './AuthorName.css'\n\nfunction AuthorName ({className, name}) {\n\treturn (\n\t\t<span className='Author'>{name}</span>\n\t)\n}\n\nexport default AuthorName;\n","let colours = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n\nexport default colours\n","import React from 'react';\nimport QuoteButton from './QuoteButton/QuoteButton.js';\nimport QuoteDisplay from './QuoteDisplay/QuoteDisplay.js';\nimport Icon from './Icon/Icon.js';\nimport AuthorName from './AuthorName/AuthorName.js';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\nimport Colours from './Colours/colours.js';\nimport './App.css'\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshareQuote: 'Quote Loading ',\n\t\t\tcurrentAuthor: 'Author Loading',\n\t\t\tcolour: 'red'\n\t\t}\n\n\t}\n\n\n\thandleTwitterShare = () => {\n\t\tlet state = this.state.shareQuote;\n\t\tlet author = this.state.currentAuthor;\n\t\twindow.open(`https://twitter.com/intent/tweet?hashtags=quotes&text=${state} ${author}`)\n\t}\n\n\thandleTumblrShare = () => {\n\t\tlet author = encodeURIComponent(this.state.currentAuthor);\n\t\tlet quote = encodeURIComponent(this.state.shareQuote);\n\t\twindow.open(`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption=${author}&content=${quote}&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button`);\n\t}\n\n\tcomponentDidMount = () =>\n\t\tthis.fetchData();\n\n\n\n\tdecodeQuote = (html) => {\n\t\tlet txt = document.createElement('textarea');\n\t\ttxt.innerHTML = html;\n\t\treturn txt.value;\n\t}\n\n\n\tfetchData = () => {\n\t\tfetch('https://thesimpsonsquoteapi.glitch.me/quotes' , {cache: \"no-store\"})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tlet parsedQuote = data[0]['quote'].replace(/<\\/?\\w+\\s?>/g, '')\n\t\t\t\tlet htmlQuote = this.decodeQuote(parsedQuote)\n\n\t\t\t\tif (htmlQuote.length > 300){\n\t\t\t\t\tthis.fetchData()\n\t\t\t\t}\telse {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tshareQuote: htmlQuote,\n\t\t\t\t\t\t\t\tcurrentAuthor: data[0]['character']\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t);\n\t\tthis.fetchColour();\n\t\t\n\t\n\t}\n\n\tfetchColour = () => {\n\t\tthis.setState({\n\t\t\tcolour: Colours[Math.floor(Math.random() * (Colours.length) )]\n\t\t});\n\t}\n\n\n\trender() {\n\t\treturn (\t\t\n\t\t\t<div style={{backgroundColor: this.state.colour}} className='Container'>\n\t\t\t\t<div className='QuoteBox'>\n\t\t\t\t\t<div className='QuoteElement'>\n\t\t\t\t\t\t<QuoteDisplay className='quote' quotationMark={faQuoteLeft} quote={this.state.shareQuote} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='AuthorContainer'>\n\t\t\t\t\t\t<AuthorName className='Author' name={this.state.currentAuthor} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='ButtonsIconContainer'>\n\t\t\t\t\t\t<div className='Icons'>\n\t\t\t\t\t\t\t<Icon className=\"fab fa-twitter-square\" handleClick={this.handleTwitterShare} />\n\t\t\t\t\t\t\t<Icon className=\"fab fa-tumblr-square\" handleClick={this.handleTumblrShare} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='NewQuote'>\n\t\t\t\t\t\t\t<QuoteButton handleClick={this.fetchData} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport React from 'react';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}